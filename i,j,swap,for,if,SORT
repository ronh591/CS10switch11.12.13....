#include <iostream>
using namespace std;
/*int main() {
  int array[] = {5, 3, 4, 1, 2};
  int size = sizeof(array) / sizeof(array[0]);

  bubble_sort(array, size);

  for (int i = 0; i < size; i++) {
    cout << array[i] << " ";
  }
  cout << endl;
  

int array[] = {5, 3, 4, 1, 2}; */
void bubble_sort(int array[], int size) {
  for (int i = 0; i < size - 1; i++) {
    for (int j = 0; j < size - i - 1; j++) {
        //both i and j equal zero on the first if array comparison
      if (array[j] > array[j + 1]) { // if 5 > 3 and it is...
        int temp = array[j]; // temp is initialized at array[0] = 5
        array[j] = array[j + 1];// 5 is now in three's place
        array[j + 1] = temp; //temp now equals 3 and temp now equals array [j + 1] = 0
      }
    }
  }
}
/*When the bubble_sort() function is called on this array, the outer loop will iterate as follows:
Yes, the outer i loop is completed before the inner j loop begins. This is because 
the inner j loop is nested within the outer i loop. 
This means that the inner j loop will not begin executing until the outer
i loop has finished executing.
i = 0
i = 1
i = 2
i = 3
No, the inner loop j does not inherit the values of the outer loop i. The two loops are completely independent of each other.

The outer loop i iterates over the elements of the array, and the inner loop j compares the current element with the next
element in the array. 
If the current element is greater than the next element, the two elements are swapped.

The inner loop j always starts at 0, regardless of the value of the outer loop i. 
The two for loops in the bubble_sort() function have different values of i. The outer loop iterates from i = 0 to i < size - 1. 
The inner loop iterates from j = 0 to j < size - i - 1.
this means that the inner loop will always compare the first element of the array with the second element, 
the second element with the third element, and so on.

This means that the values of i in the two loops will differ in the following ways:

The outer loop will always iterate over all elements of the array, while the inner loop will only iterate over the elements of the array 
that have not yet been sorted.
The inner loop will iterate over fewer elements of the array each time, because the outer loop will gradually move the largest elements of the array to the
end of the array, where they will no longer need to be compared.
For example, consider the following array:
void bubble_sort(int array[], int size) {
  for (int i = 0; i < size - 1; i++) {
    for (int j = 0; j < size - i - 1; j++) {
      if (array[j] > array[j + 1]) {
        int temp = array[j];
        array[j] = array[j + 1];
        array[j + 1] = temp;
        

[5, 3, 4, 1, 2]
When the bubble_sort() function is called on this array, the outer loop will iterate as follows:

i = 0
i = 1
i = 2
i = 3
The inner loop will iterate as follows for each value of i:

| i | j | array[j] | array[j + 1] |
|---|---|---|---|
| 0 | 0 | 5 | 3 |
| 0 | 1 | 3 | 4 |
| 0 | 2 | 4 | 1 |
| 1 | 0 | 3 | 4 |
| 1 | 1 | 4 | 1 |
| 2 | 0 | 4 | 1 |
| 3 | 0 | 4 | 1 |
As you can see, the inner loop iterates over fewer elements of the array each time,
because the outer loop gradually moves the largest elements of the array to the end of the array.*/
int main() {
  int array[] = {5, 3, 4, 1, 2};
  int size = sizeof(array) / sizeof(array[0]);

  bubble_sort(array, size);

  for (int i = 0; i < size; i++) {
    cout << array[i] << " ";
  }
  cout << endl;

  return 0;
}
